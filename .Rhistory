Sys.which("make")
install.packages("jsonlite", type = "source")
Hola
getwar()
getwd()
nuevo_dir<- "C:/contrastehipotesis"
library(knitr)
install.packages("latexpdf")
library(latexpdf)
library(tinytex)
knitr::opts_chunk$set(echo = TRUE)
#H0: 450mg | H1: no 450mg.
#Tipo de errores que podemos cometer empleando el contraste de hipótesis.
tabla_errores_CH <- data.frame(
H0_Verdadera = c("No Error","Error Tipo I") ,
H0_Falsa = c(""Error Tipo II","No Error") ,
#H0: 450mg | H1: no 450mg.
#Tipo de errores que podemos cometer empleando el contraste de hipótesis.
tabla_errores_CH <- data.frame(
H0_Verdadera = c("No Error","Error Tipo I") ,
H0_Falsa = c(""Error Tipo II","No Error")
#H0: 450mg | H1: no 450mg.
#Tipo de errores que podemos cometer empleando el contraste de hipótesis.
tabla_errores_CH <- data.frame(
H0_Verdadera = c("No Error","Error Tipo I") ,
H0_Falsa = c("Error Tipo II","No Error")
)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Cambio los nombres asignados a las filas: Aceptar H0 (row1) y Rechazar H0(row2)
rownames(tabla_errores_CH) <- c("Aceptar H0,"Rechazar H0")
#Cambio los nombres asignados a las filas: Aceptar H0 (row1) y Rechazar H0(row2)
rownames(tabla_errores_CH) <- c("Aceptar H0","Rechazar H0")
#Visualizo el data frame
Knitr::Kable(tabla_errores_CH)
#Cambio los nombres asignados a las filas: Aceptar H0 (row1) y Rechazar H0(row2)
rownames(tabla_errores_CH) <- c("Aceptar H0","Rechazar H0")
#Visualizo el data frame
Knitr::Kable(tabla_errores_CH)
#Cambio los nombres asignados a las filas: Aceptar H0 (row1) y Rechazar H0(row2)
rownames(tabla_errores_CH) <- c("Aceptar H0","Rechazar H0")
#Visualizo el data frame
knitr::Kable(tabla_errores_CH)
#Cambio los nombres asignados a las filas: Aceptar H0 (row1) y Rechazar H0(row2)
rownames(tabla_errores_CH) <- c("Aceptar H0","Rechazar H0")
#Visualizo el data frame
knitr::kable(tabla_errores_CH)
knitr::opts_chunk$set(echo = TRUE)
#H0: 450mg | H1: no 450mg.
#Tipo de errores que podemos cometer empleando el contraste de hipótesis.
tabla_errores_CH <- data.frame(
H0_Verdadera = c("No Error","Error Tipo I") ,
H0_Falsa = c("Error Tipo II","No Error")
)
#H0: 450mg | H1: no 450mg.
#Tipo de errores que podemos cometer empleando el contraste de hipótesis.
tabla_errores_CH <- data.frame(
H0_Verdadera = c("No Error","Error Tipo I") ,
H0_Falsa = c("Error Tipo II","No Error")
)
#Cambio los nombres asignados a las filas: Aceptar H0 (row1) y Rechazar H0(row2)
rownames(tabla_errores_CH) <- c("Aceptar H0","Rechazar H0")
#Visualizo el data frame
knitr::kable(tabla_errores_CH)
nuevo_dir<- "C:/regresion_lineal"
nuevo_dir<- "C:/actrgls"
nuevo_dir<- "C:/actrgls"
setwd(nuevo_dir)
knitr::opts_chunk$set(echo = TRUE)
sumatorio_columnas <- colSums (tabla_datos[ , 1:4])
library(kableExtra)
knitr::opts_chunk$set(echo = TRUE)
x_distancia<-c(1.1,100.2,90.3,5.4,57.5,6.6,34.7,65.8,57.9,86.1)
y_cuentas<-c(110,2,6,98,40,94,31,5,8,10)
xy <- y_cuentas * x_distancia
x_cuadrado <- x_distancia^2
tabla_datos <- data.frame(x_distancia,y_cuentas,xy,x_cuadrado)
kbl(tabla_datos) %>%
kable_minimal()
sumatorio_columnas <- colSums (tabla_datos[ , 1:4])
sumatorio_columnas
totales_sumatorios<-data.frame(x_distancia =c(505.60),
y_cuentas =c(404.00),
xy =c(7041.70),
x_cuadrado =c(37873.66))
totales_sumatorios<-data.frame(x_distancia =c(505.60),
y_cuentas =c(404.00),
xy =c(7041.70),
x_cuadrado =c(37873.66))
totales_sumatorios<-data.frame(x_distancia =c(505.60),
y_cuentas =c(404.00),
xy =c(7041.70),
x_cuadrado =c(37873.66))
sumatorio_columnas_df <- rbind(tabla_datos,totales_sumatorios)
kbl(sumatorio_columnas_df) %>%
kable_minimal() %>%
row_spec(nrow(sumatorio_columnas_df), bold = TRUE, color = "black", background = "white")
#Calculamos el número de cuentas para este yacimiento
distancia_nueva <- 1.1
prediccion <- predict(recta, newdata = data.frame(distancia = distancia_nueva))
cuentas_prediccion <- c(6, 98, 40, 94, 31, 5, 8, 10)
predicciones_cuentas <- c(-6.682842, 85.520196, 28.938591, 84.216973, 53.69983, 19.924631, 28.504183, -2.121561)
residuos <- cuentas_prediccion - predicciones_cuentas
print(residuos)
set.seed(123)
indices_entrenamiento <- sample(1:length(cuentas), 0.7 * length(cuentas))
library(caret)
install.packages("caret")
library(caret)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(cuentas ~ ., data = datos, method = "lm", trControl = control)
library(caret)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(cuentas ~ ., data = datos, method = "lm", trControl = control)
library(caret)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(cuentas ~ ., data = datos, method = "lm", trControl = control)
set.seed(123)
indices_entrenamiento <- sample(1:length(cuentas), 0.7 * length(cuentas))
library(caret)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(cuentas ~ ., data = datos, method = "lm", trControl = control)
#Calculamos el número de cuentas para este yacimiento
distancia_nueva <- 1.1
prediccion <- predict(recta, newdata = data.frame(distancia = distancia_nueva))
cuentas <- c(110,2,6,98,40,94,31,5,8,10)
distancia <- c( 1.1,100.2,90.3,5.4,57.5,6.6,34.7,65.8,57.9,86.1)
datos <- data.frame(distancia, cuentas)
recta <- lm(cuentas ~ distancia, data = datos)
summary(recta)
#Calculamos el número de cuentas para este yacimiento
distancia_nueva <- 1.1
prediccion <- predict(recta, newdata = data.frame(distancia = distancia_nueva))
print(prediccion)
#calculamos el error estándar de esta predicción
prediccion_error <- predict(recta, newdata = data.frame(distancia = distancia_nueva), se.fit = TRUE)$se.fit
print(prediccion_error)
cuentas_prediccion <- c(6, 98, 40, 94, 31, 5, 8, 10)
predicciones_cuentas <- c(-6.682842, 85.520196, 28.938591, 84.216973, 53.69983, 19.924631, 28.504183, -2.121561)
residuos <- cuentas_prediccion - predicciones_cuentas
print(residuos)
library(caret)
control <- trainControl(method = "cv", number = 5)
modelo_cv <- train(cuentas ~ ., data = datos, method = "lm", trControl = control)
print(modelo_cv)
set.seed(123)
indices_entrenamiento <- sample(1:length(cuentas), 0.7 * length(cuentas))
datos_entrenamiento <- datos[indices_entrenamiento, ]
datos_prueba <- datos[-indices_entrenamiento, ]
library(caret)
con <- trainControl(method = "cv", number = 5)
mod <- train(cuentas ~ ., data = datos, method = "lm", trControl = control)
print(modelo_cv)
set.seed(123)
ind_entrenamiento <- sample(1:length(cuentas), 0.7 * length(cuentas))
d_entrenamiento <- datos[indices_entrenamiento, ]
d_prueba <- datos[-indices_entrenamiento, ]
cu_predic <- c(6, 98, 40, 94, 31, 5, 8, 10)
pred_cu <- c(-6.682842, 85.520196, 28.938591, 84.216973, 53.69983, 19.924631, 28.504183, -2.121561)
residuos <- cuentas_prediccion - predicciones_cuentas
print(residuos)
#Se calcula el número de cuentas para este yacimiento
distancia_nueva <- 1.1
prediccion <- predict(recta, newdata = data.frame(distancia = distancia_nueva))
print(prediccion)
#Se calcula el error estándar de esta predicción
prediccion_error <- predict(recta, newdata = data.frame(distancia = distancia_nueva), se.fit = TRUE)$se.fit
print(prediccion_error)
